// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"faizalmaulana/lsp/models/repo"
	"github.com/gin-gonic/gin"
	"net/http"
)

// Injectors from wire.go:

// InitializeApp wires dependencies and returns an *App.
func InitializeApp() *App {
	config := ProvideEnvConfig()
	db := ProvideDB(config)
	usersRepo := ProvideUsersRepo(db)
	authenticationService := ProvideAuthenticationService(usersRepo)
	sessionsRepo := ProvideSessionsRepo(db)
	sessionService := ProvideSessionService(sessionsRepo)
	authenticationHandler := ProvideAuthenticationHandler(authenticationService, sessionService, config)
	profilesRepo := ProvideProfilesRepo(db)
	profilesService := ProvideProfilesService(profilesRepo)
	usersService := ProvideUsersService(usersRepo)
	usersHandler := ProvideUsersHandler(config, profilesService, usersService)
	engine := ProvideRouterWithRoutes(authenticationHandler, usersHandler)
	server := ProvideHTTPServer(config, engine)
	app := &App{
		Server: server,
		Router: engine,
	}
	return app
}

// InitializeRepos wires and returns *Repos.
func InitializeRepos() *Repos {
	config := ProvideEnvConfig()
	db := ProvideDB(config)
	usersRepo := ProvideUsersRepo(db)
	profilesRepo := ProvideProfilesRepo(db)
	repos := &Repos{
		Users:    usersRepo,
		Profiles: profilesRepo,
	}
	return repos
}

// wire.go:

// App is an aggregate of application objects returned by the injector.
type App struct {
	Server *http.Server
	Router *gin.Engine
}

// Repos groups repository instances.
type Repos struct {
	Users    repo.UsersRepo
	Profiles repo.ProfilesRepo
}

// InitializeServer is a convenience wrapper returning only the server.
func InitializeServer() *http.Server {
	app := InitializeApp()
	return app.Server
}
